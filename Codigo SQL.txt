SET SERVEROUTPUT ON;

--Excluindo tabelas

DROP TABLE tb_alerta CASCADE CONSTRAINTS;
DROP TABLE tb_consumo CASCADE CONSTRAINTS;
DROP TABLE tb_dispositivo CASCADE CONSTRAINTS;
DROP TABLE tb_sugestao CASCADE CONSTRAINTS;
DROP TABLE tb_usuario CASCADE CONSTRAINTS;
DROP TABLE tb_auditoria CASCADE CONSTRAINTS;

CREATE TABLE tb_alerta (
    id_alerta       INTEGER NOT NULL,
    id_dispositivo  INTEGER NOT NULL,
    id_usuario      INTEGER NOT NULL,
    data_alerta     DATE,
    tipo_alerta     INTEGER,
    mensagem_alerta VARCHAR2(100)
);

ALTER TABLE tb_alerta ADD CONSTRAINT tb_alerta_pk PRIMARY KEY ( id_alerta );

CREATE TABLE tb_consumo (
    id_consumo     INTEGER NOT NULL,
    id_usuario     INTEGER NOT NULL,
    id_dispositivo INTEGER NOT NULL,
    id_sugestao    INTEGER NOT NULL,
    data_consumo   DATE,
    consumo_kwh    INTEGER,
    custo_consumo  INTEGER
);

ALTER TABLE tb_consumo ADD CONSTRAINT tb_consumo_pk PRIMARY KEY ( id_consumo );

CREATE TABLE tb_dispositivo (
    id_dispositivo              INTEGER NOT NULL,
    id_usuario                  INTEGER NOT NULL,
    nome_dispositivo            VARCHAR2(50),
    tipo_dispositivo            INTEGER,
    status_dispositivo          INTEGER,
    data_instalacao_dispositivo DATE
);

ALTER TABLE tb_dispositivo ADD CONSTRAINT tb_dispositivo_pk PRIMARY KEY ( id_dispositivo );

CREATE TABLE tb_sugestao (
    id_sugestao          INTEGER NOT NULL,
    descricao_sugestao   VARCHAR2(200),
    impacto_estimado_kwh INTEGER,
    sugestao_ia          VARCHAR2(200)
);

ALTER TABLE tb_sugestao ADD CONSTRAINT tb_sugestao_pk PRIMARY KEY ( id_sugestao );

CREATE TABLE tb_usuario (
    id_usuario             INTEGER NOT NULL,
    nome_usuario           VARCHAR2(30),
    email_usuario          VARCHAR2(30),
    senha_usuario          VARCHAR2(30),
    endereco_usuario       VARCHAR2(100),
    renda_usuario          INTEGER,
    perfil_consumo_usuario VARCHAR2(100)
);

CREATE TABLE tb_auditoria (
    id_auditoria   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tabela_nome    VARCHAR2(50),
    operacao       VARCHAR2(10),
    usuario        VARCHAR2(30),
    data_operacao  DATE,
    dados_antigos  CLOB,
    dados_novos    CLOB
);

ALTER TABLE tb_usuario ADD CONSTRAINT tb_usuario_pk PRIMARY KEY ( id_usuario );

ALTER TABLE tb_alerta
    ADD CONSTRAINT tb_alerta_tb_dispositivo_fk FOREIGN KEY ( id_dispositivo )
        REFERENCES tb_dispositivo ( id_dispositivo );

ALTER TABLE tb_alerta
    ADD CONSTRAINT tb_alerta_tb_usuario_fk FOREIGN KEY ( id_usuario )
        REFERENCES tb_usuario ( id_usuario );

ALTER TABLE tb_consumo
    ADD CONSTRAINT tb_consumo_tb_dispositivo_fk FOREIGN KEY ( id_dispositivo )
        REFERENCES tb_dispositivo ( id_dispositivo );

ALTER TABLE tb_consumo
    ADD CONSTRAINT tb_consumo_tb_sugestao_fk FOREIGN KEY ( id_sugestao )
        REFERENCES tb_sugestao ( id_sugestao );

ALTER TABLE tb_consumo
    ADD CONSTRAINT tb_consumo_tb_usuario_fk FOREIGN KEY ( id_usuario )
        REFERENCES tb_usuario ( id_usuario );

ALTER TABLE tb_dispositivo
    ADD CONSTRAINT tb_dispositivo_tb_usuario_fk FOREIGN KEY ( id_usuario )
        REFERENCES tb_usuario ( id_usuario );
        
        
-- Inserts para tb_usuario
INSERT INTO tb_usuario (id_usuario, nome_usuario, email_usuario, senha_usuario, endereco_usuario, renda_usuario, perfil_consumo_usuario)
VALUES (1, 'Ana Silva', 'ana.silva@example.com', 'senha123', 'Rua das Flores, 123', 4000, 'Alto consumo noturno');

INSERT INTO tb_usuario (id_usuario, nome_usuario, email_usuario, senha_usuario, endereco_usuario, renda_usuario, perfil_consumo_usuario)
VALUES (2, 'Carlos Santos', 'carlos.santos@example.com', 'senha456', 'Av. Central, 456', 6000, 'Consumo moderado diurno');

INSERT INTO tb_usuario (id_usuario, nome_usuario, email_usuario, senha_usuario, endereco_usuario, renda_usuario, perfil_consumo_usuario)
VALUES (3, 'Mariana Lima', 'mariana.lima@example.com', 'senha789', 'Rua da Paz, 789', 3000, 'Baixo consumo contínuo');

INSERT INTO tb_usuario (id_usuario, nome_usuario, email_usuario, senha_usuario, endereco_usuario, renda_usuario, perfil_consumo_usuario)
VALUES (4, 'João Pedro', 'joao.pedro@example.com', 'senha012', 'Travessa do Sol, 12', 7000, 'Consumo alto durante o dia');

INSERT INTO tb_usuario (id_usuario, nome_usuario, email_usuario, senha_usuario, endereco_usuario, renda_usuario, perfil_consumo_usuario)
VALUES (5, 'Laura Alves', 'laura.alves@example.com', 'senha345', 'Alameda Verde, 345', 5000, 'Consumo regular noturno');

-- Inserts para tb_dispositivo
INSERT INTO tb_dispositivo (id_dispositivo, id_usuario, nome_dispositivo, tipo_dispositivo, status_dispositivo, data_instalacao_dispositivo)
VALUES (1, 1, 'Geladeira', 1, 1, TO_DATE('2023-01-15', 'YYYY-MM-DD'));

INSERT INTO tb_dispositivo (id_dispositivo, id_usuario, nome_dispositivo, tipo_dispositivo, status_dispositivo, data_instalacao_dispositivo)
VALUES (2, 2, 'Ar Condicionado', 2, 1, TO_DATE('2023-03-20', 'YYYY-MM-DD'));

INSERT INTO tb_dispositivo (id_dispositivo, id_usuario, nome_dispositivo, tipo_dispositivo, status_dispositivo, data_instalacao_dispositivo)
VALUES (3, 3, 'Televisão', 3, 0, TO_DATE('2023-06-05', 'YYYY-MM-DD'));

INSERT INTO tb_dispositivo (id_dispositivo, id_usuario, nome_dispositivo, tipo_dispositivo, status_dispositivo, data_instalacao_dispositivo)
VALUES (4, 4, 'Máquina de Lavar', 4, 1, TO_DATE('2023-07-12', 'YYYY-MM-DD'));

INSERT INTO tb_dispositivo (id_dispositivo, id_usuario, nome_dispositivo, tipo_dispositivo, status_dispositivo, data_instalacao_dispositivo)
VALUES (5, 5, 'Computador', 5, 1, TO_DATE('2023-08-18', 'YYYY-MM-DD'));

-- Inserts para tb_sugestao
INSERT INTO tb_sugestao (id_sugestao, descricao_sugestao, impacto_estimado_kwh, sugestao_ia)
VALUES (1, 'Troque lâmpadas para LED', 50, 'Reduzir consumo em iluminação.');

INSERT INTO tb_sugestao (id_sugestao, descricao_sugestao, impacto_estimado_kwh, sugestao_ia)
VALUES (2, 'Evite usar ar condicionado durante o dia', 100, 'Reduzir consumo em climatização.');

INSERT INTO tb_sugestao (id_sugestao, descricao_sugestao, impacto_estimado_kwh, sugestao_ia)
VALUES (3, 'Desligue dispositivos em standby', 30, 'Reduzir consumo em eletrônicos.');

INSERT INTO tb_sugestao (id_sugestao, descricao_sugestao, impacto_estimado_kwh, sugestao_ia)
VALUES (4, 'Use máquina de lavar com carga completa', 40, 'Reduzir consumo em eletrodomésticos.');

INSERT INTO tb_sugestao (id_sugestao, descricao_sugestao, impacto_estimado_kwh, sugestao_ia)
VALUES (5, 'Monitore o uso de eletrodomésticos antigos', 70, 'Reduzir consumo geral.');

-- Inserts para tb_consumo
INSERT INTO tb_consumo (id_consumo, id_usuario, id_dispositivo, id_sugestao, data_consumo, consumo_kwh, custo_consumo)
VALUES (1, 1, 1, 1, TO_DATE('2024-01-10', 'YYYY-MM-DD'), 150, 75);

INSERT INTO tb_consumo (id_consumo, id_usuario, id_dispositivo, id_sugestao, data_consumo, consumo_kwh, custo_consumo)
VALUES (2, 2, 2, 2, TO_DATE('2024-02-12', 'YYYY-MM-DD'), 200, 100);

INSERT INTO tb_consumo (id_consumo, id_usuario, id_dispositivo, id_sugestao, data_consumo, consumo_kwh, custo_consumo)
VALUES (3, 3, 3, 3, TO_DATE('2024-03-15', 'YYYY-MM-DD'), 100, 50);

INSERT INTO tb_consumo (id_consumo, id_usuario, id_dispositivo, id_sugestao, data_consumo, consumo_kwh, custo_consumo)
VALUES (4, 4, 4, 4, TO_DATE('2024-04-18', 'YYYY-MM-DD'), 180, 90);

INSERT INTO tb_consumo (id_consumo, id_usuario, id_dispositivo, id_sugestao, data_consumo, consumo_kwh, custo_consumo)
VALUES (5, 5, 5, 5, TO_DATE('2024-05-20', 'YYYY-MM-DD'), 220, 110);

-- Inserts para tb_alerta
INSERT INTO tb_alerta (id_alerta, id_dispositivo, id_usuario, data_alerta, tipo_alerta, mensagem_alerta)
VALUES (1, 1, 1, TO_DATE('2024-06-01', 'YYYY-MM-DD'), 1, 'Consumo elevado no dispositivo.');

INSERT INTO tb_alerta (id_alerta, id_dispositivo, id_usuario, data_alerta, tipo_alerta, mensagem_alerta)
VALUES (2, 2, 2, TO_DATE('2024-06-05', 'YYYY-MM-DD'), 2, 'Dispositivo inativo por longo período.');

INSERT INTO tb_alerta (id_alerta, id_dispositivo, id_usuario, data_alerta, tipo_alerta, mensagem_alerta)
VALUES (3, 3, 3, TO_DATE('2024-06-10', 'YYYY-MM-DD'), 3, 'Pico de consumo detectado.');

INSERT INTO tb_alerta (id_alerta, id_dispositivo, id_usuario, data_alerta, tipo_alerta, mensagem_alerta)
VALUES (4, 4, 4, TO_DATE('2024-06-15', 'YYYY-MM-DD'), 1, 'Consumo acima do limite diário.');

INSERT INTO tb_alerta (id_alerta, id_dispositivo, id_usuario, data_alerta, tipo_alerta, mensagem_alerta)
VALUES (5, 5, 5, TO_DATE('2024-06-20', 'YYYY-MM-DD'), 2, 'Dispositivo em status de erro.');

-- Inserts para tb_auditoria
INSERT INTO tb_auditoria (tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos)
VALUES ('tb_usuario', 'INSERT', 'Admin', TO_DATE('2024-11-01', 'YYYY-MM-DD'), NULL, 'ID: 1, Nome: Ana Silva, Email: ana.silva@example.com');

INSERT INTO tb_auditoria (tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos)
VALUES ('tb_dispositivo', 'UPDATE', 'Admin', TO_DATE('2024-11-02', 'YYYY-MM-DD'), 'Status: 0', 'Status: 1');

INSERT INTO tb_auditoria (tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos)
VALUES ('tb_consumo', 'DELETE', 'Admin', TO_DATE('2024-11-03', 'YYYY-MM-DD'), 'ID: 3, Consumo: 100 kWh', NULL);

INSERT INTO tb_auditoria (tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos)
VALUES ('tb_alerta', 'INSERT', 'Admin', TO_DATE('2024-11-04', 'YYYY-MM-DD'), NULL, 'ID: 5, Mensagem: Dispositivo em status de erro');

INSERT INTO tb_auditoria (tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos)
VALUES ('tb_sugestao', 'INSERT', 'Admin', TO_DATE('2024-11-05', 'YYYY-MM-DD'), NULL, 'ID: 1, Descrição: Troque lâmpadas para LED');

--Criando procedures para realizar inserts no banco.

-- Procedure para inserir na tabela tb_alerta
CREATE OR REPLACE PROCEDURE sp_insert_tb_alerta(
    p_id_alerta       INTEGER,
    p_id_dispositivo  INTEGER,
    p_id_usuario      INTEGER,
    p_data_alerta     DATE,
    p_tipo_alerta     INTEGER,
    p_mensagem_alerta VARCHAR2
)
AS
BEGIN
    INSERT INTO tb_alerta (
        id_alerta, 
        id_dispositivo, 
        id_usuario, 
        data_alerta, 
        tipo_alerta, 
        mensagem_alerta
    ) 
    VALUES (
        p_id_alerta, 
        p_id_dispositivo, 
        p_id_usuario, 
        p_data_alerta, 
        p_tipo_alerta, 
        p_mensagem_alerta
    );

    DBMS_OUTPUT.PUT_LINE('Registro inserido na tabela tb_alerta: ID Alerta = ' || p_id_alerta ||
                         ', ID Dispositivo = ' || p_id_dispositivo ||
                         ', ID Usuário = ' || p_id_usuario ||
                         ', Mensagem = ' || p_mensagem_alerta);
END;
/

--Exemplo da procedure sp_insert_tb_alerta

BEGIN
    sp_insert_tb_alerta(
        p_id_alerta       => 6,
        p_id_dispositivo  => 3,
        p_id_usuario      => 2,
        p_data_alerta     => TO_DATE('2024-12-01', 'YYYY-MM-DD'),
        p_tipo_alerta     => 2,
        p_mensagem_alerta => 'Novo alerta de exemplo'
    );
END;
/

-- Procedure para inserir na tabela tb_consumo
CREATE OR REPLACE PROCEDURE sp_insert_tb_consumo(
    p_id_consumo     INTEGER,
    p_id_usuario     INTEGER,
    p_id_dispositivo INTEGER,
    p_id_sugestao    INTEGER,
    p_data_consumo   DATE,
    p_consumo_kwh    INTEGER,
    p_custo_consumo  INTEGER
)
AS
BEGIN
    INSERT INTO tb_consumo VALUES (p_id_consumo, p_id_usuario, p_id_dispositivo, p_id_sugestao, p_data_consumo, p_consumo_kwh, p_custo_consumo);
    DBMS_OUTPUT.PUT_LINE('Registro inserido na tabela tb_consumo: ID consumo ' || p_id_consumo || ', ID usuário ' || p_id_usuario || ', consumo kWh ' || p_consumo_kwh);
END;
/

--Exemplo da procedure sp_insert_tb_consumo

BEGIN
    sp_insert_tb_consumo(
        p_id_consumo     => 6,
        p_id_usuario     => 3,
        p_id_dispositivo => 2,
        p_id_sugestao    => 1, 
        p_data_consumo   => TO_DATE('2024-12-15', 'YYYY-MM-DD'),
        p_consumo_kwh    => 150,
        p_custo_consumo  => 75
    );
END;
/

-- Procedure para inserir na tabela tb_dispositivo
CREATE OR REPLACE PROCEDURE sp_insert_tb_dispositivo(
    p_id_dispositivo              INTEGER,
    p_id_app                      INTEGER,
    p_nome_dispositivo            VARCHAR2,
    p_tipo_dispositivo            INTEGER,
    p_status_dispositivo          INTEGER,
    p_data_instalacao_dispositivo DATE
)
AS
BEGIN
    INSERT INTO tb_dispositivo VALUES (p_id_dispositivo, p_id_app, p_nome_dispositivo, p_tipo_dispositivo, p_status_dispositivo, p_data_instalacao_dispositivo);
    DBMS_OUTPUT.PUT_LINE('Registro inserido na tabela tb_dispositivo: ' || p_id_dispositivo || ', ' || p_nome_dispositivo || ', tipo ' || p_tipo_dispositivo);
END;
/

--Exemplo da procedure sp_insert_tb_dispositivo

BEGIN
    sp_insert_tb_dispositivo(
        p_id_dispositivo              => 6,
        p_id_app                      => 2, 
        p_nome_dispositivo            => 'Arduino',
        p_tipo_dispositivo            => 3,  
        p_status_dispositivo          => 1,  
        p_data_instalacao_dispositivo => TO_DATE('2024-11-20', 'YYYY-MM-DD') 
    );
END;
/

-- Procedure para inserir na tabela tb_sugestao
CREATE OR REPLACE PROCEDURE sp_insert_tb_sugestao(
    p_id_sugestao          INTEGER,
    p_descricao_sugestao   VARCHAR2,
    p_impacto_estimado_kwh INTEGER,
    p_sugestao_ia          VARCHAR2
)
AS
BEGIN
    INSERT INTO tb_sugestao (
        id_sugestao, 
        descricao_sugestao, 
        impacto_estimado_kwh, 
        sugestao_ia
    )
    VALUES (
        p_id_sugestao, 
        p_descricao_sugestao, 
        p_impacto_estimado_kwh, 
        p_sugestao_ia
    );

    DBMS_OUTPUT.PUT_LINE(
        'Registro inserido na tabela tb_sugestao: ' ||
        'ID Sugestão = ' || p_id_sugestao || ', ' ||
        'Descrição = ' || p_descricao_sugestao || ', ' ||
        'Impacto Estimado = ' || p_impacto_estimado_kwh || ' kWh, ' ||
        'Sugestão IA = ' || p_sugestao_ia
    );
END;
/

--Exemplo da procedure sp_insert_tb_sugestao

BEGIN
    sp_insert_tb_sugestao(
        p_id_sugestao          => 7, 
        p_descricao_sugestao   => 'Utilize energia solar para aquecimento', 
        p_impacto_estimado_kwh => 250, 
        p_sugestao_ia          => 'Redução significativa de custos com aquecimento sustentável'
    );
END;
/

-- Procedure para inserir na tabela tb_usuario

CREATE OR REPLACE PROCEDURE sp_insert_tb_usuario(
    p_id_usuario             INTEGER,
    p_nome_usuario           VARCHAR2,
    p_email_usuario          VARCHAR2,
    p_senha_usuario          VARCHAR2,
    p_endereco_usuario       VARCHAR2,
    p_renda_usuario          INTEGER,
    p_perfil_consumo_usuario VARCHAR2
)
AS
BEGIN
    INSERT INTO tb_usuario (
        id_usuario,
        nome_usuario,
        email_usuario,
        senha_usuario,
        endereco_usuario,
        renda_usuario,
        perfil_consumo_usuario
    )
    VALUES (
        p_id_usuario,
        p_nome_usuario,
        p_email_usuario,
        p_senha_usuario,
        p_endereco_usuario,
        p_renda_usuario,
        p_perfil_consumo_usuario
    );

    DBMS_OUTPUT.PUT_LINE(
        'Registro inserido na tabela tb_usuario: ' ||
        'ID Usuário = ' || p_id_usuario || ', ' ||
        'Nome = ' || p_nome_usuario || ', ' ||
        'Perfil = ' || p_perfil_consumo_usuario
    );
END;
/

--Exemplo da procedure sp_insert_tb_usuario

BEGIN
    sp_insert_tb_usuario(
        p_id_usuario             => 6,
        p_nome_usuario           => 'Pedro Alves',
        p_email_usuario          => 'pedro.alves@example.com',
        p_senha_usuario          => 'senha123',
        p_endereco_usuario       => 'Rua Verde, 123',
        p_renda_usuario          => 5500,
        p_perfil_consumo_usuario => 'Consumo noturno elevado'
    );
END;
/

--Criando funções

--Função para calcular o custo médio por kWh

CREATE OR REPLACE FUNCTION fn_calcular_custo_medio(
    p_consumo_kwh INTEGER, 
    p_custo_total INTEGER
)
RETURN NUMBER
AS
    l_result NUMBER;
BEGIN
    IF p_consumo_kwh = 0 THEN
        l_result := 0;
        DBMS_OUTPUT.PUT_LINE('Erro: O consumo kWh não pode ser zero.');
    ELSE
        l_result := p_custo_total / p_consumo_kwh;
        DBMS_OUTPUT.PUT_LINE('Custo médio calculado: ' || TO_CHAR(l_result, 'FM999990.00') || ' por kWh.');
    END IF;
    RETURN l_result;
END;
/

--Exemplo da função

DECLARE
    custo_medio NUMBER;
BEGIN
    custo_medio := fn_calcular_custo_medio(100, 50);
    DBMS_OUTPUT.PUT_LINE('Resultado final do custo médio: ' || TO_CHAR(custo_medio, 'FM999990.00'));
END;
/

--Função para validar o formato do e-mail

CREATE OR REPLACE FUNCTION fn_validar_email(
    p_email_usuario VARCHAR2
)
RETURN VARCHAR2
AS
    l_result VARCHAR2(10);
BEGIN
    IF REGEXP_LIKE(p_email_usuario, '^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$') THEN
        l_result := 'Válido';
        DBMS_OUTPUT.PUT_LINE('Email "' || p_email_usuario || '" é válido.');
    ELSE
        l_result := 'Inválido';
        DBMS_OUTPUT.PUT_LINE('Email "' || p_email_usuario || '" é inválido.');
    END IF;
    RETURN l_result;
END;
/

--Exemplo fn_validar_email

DECLARE
    validacao_email VARCHAR2(10);
BEGIN
    validacao_email := fn_validar_email('teste@email.com');
    DBMS_OUTPUT.PUT_LINE('Resultado da validação: ' || validacao_email);
END;
/

--Triggers

--Trigger para tb_alerta

CREATE OR REPLACE TRIGGER trg_audit_tb_alerta
AFTER INSERT OR UPDATE OR DELETE ON tb_alerta
FOR EACH ROW
DECLARE
    v_operacao      VARCHAR2(10);
    v_dados_antigos VARCHAR2(4000);
    v_dados_novos   VARCHAR2(4000);
BEGIN
    -- Define o tipo de operação
    IF INSERTING THEN
        v_operacao := 'INSERT';
        v_dados_antigos := NULL;
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_alerta), 'NULL') || 
                         ', Mensagem: ' || NVL(:NEW.mensagem_alerta, 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: INSERT realizada em tb_alerta');
    ELSIF UPDATING THEN
        v_operacao := 'UPDATE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_alerta), 'NULL') || 
                           ', Mensagem: ' || NVL(:OLD.mensagem_alerta, 'NULL');
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_alerta), 'NULL') || 
                         ', Mensagem: ' || NVL(:NEW.mensagem_alerta, 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: UPDATE realizada em tb_alerta');
    ELSIF DELETING THEN
        v_operacao := 'DELETE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_alerta), 'NULL') || 
                           ', Mensagem: ' || NVL(:OLD.mensagem_alerta, 'NULL');
        v_dados_novos := NULL;
        DBMS_OUTPUT.PUT_LINE('Operação: DELETE realizada em tb_alerta');
    END IF;

    -- Insere os dados na tabela de auditoria
    INSERT INTO tb_auditoria (
        tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos
    )
    VALUES (
        'tb_alerta',
        v_operacao,
        USER,
        SYSDATE,
        SUBSTR(v_dados_antigos, 1, 4000),
        SUBSTR(v_dados_novos, 1, 4000)
    );

    -- Exibe informações de depuração
    DBMS_OUTPUT.PUT_LINE('Dados antigos: ' || NVL(v_dados_antigos, 'NULL'));
    DBMS_OUTPUT.PUT_LINE('Dados novos: ' || NVL(v_dados_novos, 'NULL'));
END;
/

--Exemplo da trigger tb_alerta

UPDATE tb_alerta
SET mensagem_alerta = 'Alerta atualizado para teste UPDATE'
WHERE id_alerta = 1;
/

--Trigger para tb_consumo

CREATE OR REPLACE TRIGGER trg_audit_tb_consumo
AFTER INSERT OR UPDATE OR DELETE ON tb_consumo
FOR EACH ROW
DECLARE
    v_operacao      VARCHAR2(10);
    v_dados_antigos VARCHAR2(4000);
    v_dados_novos   VARCHAR2(4000);
BEGIN
    IF INSERTING THEN
        v_operacao := 'INSERT';
        v_dados_antigos := NULL;
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_consumo), 'NULL') || 
                         ', Consumo kWh: ' || NVL(TO_CHAR(:NEW.consumo_kwh), 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: INSERT realizada em tb_consumo');
    ELSIF UPDATING THEN
        v_operacao := 'UPDATE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_consumo), 'NULL') || 
                           ', Consumo kWh: ' || NVL(TO_CHAR(:OLD.consumo_kwh), 'NULL');
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_consumo), 'NULL') || 
                         ', Consumo kWh: ' || NVL(TO_CHAR(:NEW.consumo_kwh), 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: UPDATE realizada em tb_consumo');
    ELSIF DELETING THEN
        v_operacao := 'DELETE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_consumo), 'NULL') || 
                           ', Consumo kWh: ' || NVL(TO_CHAR(:OLD.consumo_kwh), 'NULL');
        v_dados_novos := NULL;
        DBMS_OUTPUT.PUT_LINE('Operação: DELETE realizada em tb_consumo');
    END IF;

    INSERT INTO tb_auditoria (
        tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos
    )
    VALUES (
        'tb_consumo',
        v_operacao,
        USER,
        SYSDATE,
        SUBSTR(v_dados_antigos, 1, 4000),
        SUBSTR(v_dados_novos, 1, 4000)
    );

    DBMS_OUTPUT.PUT_LINE('Dados antigos: ' || NVL(v_dados_antigos, 'NULL'));
    DBMS_OUTPUT.PUT_LINE('Dados novos: ' || NVL(v_dados_novos, 'NULL'));
END;
/

-- Exemplo para trg_audit_tb_consumo

INSERT INTO tb_consumo (id_consumo, id_usuario, id_dispositivo, id_sugestao, data_consumo, consumo_kwh, custo_consumo)
VALUES (15, 1, 3, 2, TO_DATE('2024-12-02', 'YYYY-MM-DD'), 120, 60);

--Trigger para tb_dispositivo

CREATE OR REPLACE TRIGGER trg_audit_tb_dispositivo
AFTER INSERT OR UPDATE OR DELETE ON tb_dispositivo
FOR EACH ROW
DECLARE
    v_operacao      VARCHAR2(10);
    v_dados_antigos VARCHAR2(4000);
    v_dados_novos   VARCHAR2(4000);
BEGIN
    IF INSERTING THEN
        v_operacao := 'INSERT';
        v_dados_antigos := NULL;
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_dispositivo), 'NULL') || 
                         ', Nome: ' || NVL(:NEW.nome_dispositivo, 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: INSERT realizada em tb_dispositivo');
    ELSIF UPDATING THEN
        v_operacao := 'UPDATE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_dispositivo), 'NULL') || 
                           ', Nome: ' || NVL(:OLD.nome_dispositivo, 'NULL');
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_dispositivo), 'NULL') || 
                         ', Nome: ' || NVL(:NEW.nome_dispositivo, 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: UPDATE realizada em tb_dispositivo');
    ELSIF DELETING THEN
        v_operacao := 'DELETE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_dispositivo), 'NULL') || 
                           ', Nome: ' || NVL(:OLD.nome_dispositivo, 'NULL');
        v_dados_novos := NULL;
        DBMS_OUTPUT.PUT_LINE('Operação: DELETE realizada em tb_dispositivo');
    END IF;

    INSERT INTO tb_auditoria (
        tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos
    )
    VALUES (
        'tb_dispositivo',
        v_operacao,
        USER,
        SYSDATE,
        SUBSTR(v_dados_antigos, 1, 4000),
        SUBSTR(v_dados_novos, 1, 4000)
    );

    DBMS_OUTPUT.PUT_LINE('Dados antigos: ' || NVL(v_dados_antigos, 'NULL'));
    DBMS_OUTPUT.PUT_LINE('Dados novos: ' || NVL(v_dados_novos, 'NULL'));
END;
/

--Exemplo para trg_audit_tb_dispositivo

INSERT INTO tb_dispositivo (
    id_dispositivo, 
    id_usuario, 
    nome_dispositivo, 
    tipo_dispositivo, 
    status_dispositivo, 
    data_instalacao_dispositivo
)
VALUES (10, 1,'Sensor de movimento', 1, 1, TO_DATE('2024-12-03', 'YYYY-MM-DD')
);
/

--Trigger para tb_sugestao

CREATE OR REPLACE TRIGGER trg_audit_tb_sugestao
AFTER INSERT OR UPDATE OR DELETE ON tb_sugestao
FOR EACH ROW
DECLARE
    v_operacao      VARCHAR2(10);
    v_dados_antigos VARCHAR2(4000);
    v_dados_novos   VARCHAR2(4000);
BEGIN
    IF INSERTING THEN
        v_operacao := 'INSERT';
        v_dados_antigos := NULL;
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_sugestao), 'NULL') || 
                         ', Descrição: ' || NVL(:NEW.descricao_sugestao, 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: INSERT realizada em tb_sugestao');
    ELSIF UPDATING THEN
        v_operacao := 'UPDATE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_sugestao), 'NULL') || 
                           ', Descrição: ' || NVL(:OLD.descricao_sugestao, 'NULL');
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_sugestao), 'NULL') || 
                         ', Descrição: ' || NVL(:NEW.descricao_sugestao, 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: UPDATE realizada em tb_sugestao');
    ELSIF DELETING THEN
        v_operacao := 'DELETE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_sugestao), 'NULL') || 
                           ', Descrição: ' || NVL(:OLD.descricao_sugestao, 'NULL');
        v_dados_novos := NULL;
        DBMS_OUTPUT.PUT_LINE('Operação: DELETE realizada em tb_sugestao');
    END IF;

    INSERT INTO tb_auditoria (
        tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos
    )
    VALUES (
        'tb_sugestao',
        v_operacao,
        USER,
        SYSDATE,
        SUBSTR(v_dados_antigos, 1, 4000),
        SUBSTR(v_dados_novos, 1, 4000)
    );

    DBMS_OUTPUT.PUT_LINE('Dados antigos: ' || NVL(v_dados_antigos, 'NULL'));
    DBMS_OUTPUT.PUT_LINE('Dados novos: ' || NVL(v_dados_novos, 'NULL'));
END;
/

--Exemplo para trg_audit_tb_sugestao

INSERT INTO tb_sugestao (
    id_sugestao,
    descricao_sugestao,
    impacto_estimado_kwh,
    sugestao_ia
)
VALUES (10, 'Reduzir o uso do ar condicionado', 50, 'Redução no horário noturno');
/

--Trigger para tb_usuario

CREATE OR REPLACE TRIGGER trg_audit_tb_usuario
AFTER INSERT OR UPDATE OR DELETE ON tb_usuario
FOR EACH ROW
DECLARE
    v_operacao      VARCHAR2(10);
    v_dados_antigos VARCHAR2(4000);
    v_dados_novos   VARCHAR2(4000);
BEGIN
    IF INSERTING THEN
        v_operacao := 'INSERT';
        v_dados_antigos := NULL;
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_usuario), 'NULL') || 
                         ', Nome: ' || NVL(:NEW.nome_usuario, 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: INSERT realizada em tb_usuario');
    ELSIF UPDATING THEN
        v_operacao := 'UPDATE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_usuario), 'NULL') || 
                           ', Nome: ' || NVL(:OLD.nome_usuario, 'NULL');
        v_dados_novos := 'ID: ' || NVL(TO_CHAR(:NEW.id_usuario), 'NULL') || 
                         ', Nome: ' || NVL(:NEW.nome_usuario, 'NULL');
        DBMS_OUTPUT.PUT_LINE('Operação: UPDATE realizada em tb_usuario');
    ELSIF DELETING THEN
        v_operacao := 'DELETE';
        v_dados_antigos := 'ID: ' || NVL(TO_CHAR(:OLD.id_usuario), 'NULL') || 
                           ', Nome: ' || NVL(:OLD.nome_usuario, 'NULL');
        v_dados_novos := NULL;
        DBMS_OUTPUT.PUT_LINE('Operação: DELETE realizada em tb_usuario');
    END IF;

    INSERT INTO tb_auditoria (
        tabela_nome, operacao, usuario, data_operacao, dados_antigos, dados_novos
    )
    VALUES (
        'tb_usuario',
        v_operacao,
        USER,
        SYSDATE,
        SUBSTR(v_dados_antigos, 1, 4000),
        SUBSTR(v_dados_novos, 1, 4000)
    );

    DBMS_OUTPUT.PUT_LINE('Dados antigos: ' || NVL(v_dados_antigos, 'NULL'));
    DBMS_OUTPUT.PUT_LINE('Dados novos: ' || NVL(v_dados_novos, 'NULL'));
END;
/

--Exemplo para trg_audit_tb_usuario
INSERT INTO tb_usuario (
    id_usuario, 
    nome_usuario, 
    email_usuario, 
    senha_usuario, 
    endereco_usuario, 
    renda_usuario, 
    perfil_consumo_usuario
)
VALUES (10, 'Lucas Silva', 'lucas.silva@email.com', 'senha123', 'Rua das Palmeiras, 45', 4000, 'Residencial');
/

--Inserir 10 Registros na Tabela tb_alerta

BEGIN
    sp_insert_tb_alerta(11, 1, 1, TO_DATE('2024-11-25', 'YYYY-MM-DD'), 1, 'Novo alerta: Temperatura elevada');
    sp_insert_tb_alerta(12, 2, 2, TO_DATE('2024-11-26', 'YYYY-MM-DD'), 2, 'Novo alerta: Desconexão inesperada');
    sp_insert_tb_alerta(13, 3, 3, TO_DATE('2024-11-27', 'YYYY-MM-DD'), 3, 'Novo alerta: Consumo acima da média');
    sp_insert_tb_alerta(14, 4, 4, TO_DATE('2024-11-28', 'YYYY-MM-DD'), 1, 'Novo alerta: Falha no sensor');
    sp_insert_tb_alerta(15, 5, 5, TO_DATE('2024-11-29', 'YYYY-MM-DD'), 2, 'Novo alerta: Reinício inesperado');
    sp_insert_tb_alerta(16, 1, 1, TO_DATE('2024-11-30', 'YYYY-MM-DD'), 3, 'Novo alerta: Bateria em nível crítico');
    sp_insert_tb_alerta(17, 2, 2, TO_DATE('2024-12-01', 'YYYY-MM-DD'), 1, 'Novo alerta: Falha na comunicação');
    sp_insert_tb_alerta(18, 3, 3, TO_DATE('2024-12-02', 'YYYY-MM-DD'), 2, 'Novo alerta: Sensor desconectado');
    sp_insert_tb_alerta(19, 4, 4, TO_DATE('2024-12-03', 'YYYY-MM-DD'), 1, 'Novo alerta: Temperatura muito baixa');
    sp_insert_tb_alerta(20, 5, 5, TO_DATE('2024-12-04', 'YYYY-MM-DD'), 3, 'Novo alerta: Bateria totalmente descarregada');
END;
/

--Inserir 10 Registros na Tabela tb_consumo

BEGIN
    sp_insert_tb_consumo(10, 1, 1, 1, TO_DATE('2024-11-25', 'YYYY-MM-DD'), 100, 50);
    sp_insert_tb_consumo(20, 2, 2, 2, TO_DATE('2024-11-26', 'YYYY-MM-DD'), 120, 60);
    sp_insert_tb_consumo(30, 3, 3, 3, TO_DATE('2024-11-27', 'YYYY-MM-DD'), 150, 75);
    sp_insert_tb_consumo(40, 4, 4, 4, TO_DATE('2024-11-28', 'YYYY-MM-DD'), 80, 40);
    sp_insert_tb_consumo(50, 5, 5, 5, TO_DATE('2024-11-29', 'YYYY-MM-DD'), 90, 45);
    sp_insert_tb_consumo(60, 1, 1, 1, TO_DATE('2024-11-30', 'YYYY-MM-DD'), 70, 35);
    sp_insert_tb_consumo(70, 2, 2, 2, TO_DATE('2024-12-01', 'YYYY-MM-DD'), 110, 55);
    sp_insert_tb_consumo(80, 3, 3, 3, TO_DATE('2024-12-02', 'YYYY-MM-DD'), 95, 48);
    sp_insert_tb_consumo(90, 4, 4, 4, TO_DATE('2024-12-03', 'YYYY-MM-DD'), 110, 55);
    sp_insert_tb_consumo(100, 5, 5, 5, TO_DATE('2024-12-04', 'YYYY-MM-DD'), 120, 60);
END;
/

--Inserir Registros na tabela tb_dispositivo

BEGIN
    sp_insert_tb_dispositivo(11, 1, 'Smart Speaker', 1, 1, TO_DATE('2024-12-01', 'YYYY-MM-DD'));
    sp_insert_tb_dispositivo(12, 2, 'Sensor de Movimento', 2, 1, TO_DATE('2024-12-02', 'YYYY-MM-DD'));
    sp_insert_tb_dispositivo(13, 3, 'Smart Thermostat', 3, 1, TO_DATE('2024-12-03', 'YYYY-MM-DD'));
    sp_insert_tb_dispositivo(14, 4, 'Interruptor Inteligente', 4, 1, TO_DATE('2024-12-04', 'YYYY-MM-DD'));
    sp_insert_tb_dispositivo(15, 5, 'Smart TV', 5, 1, TO_DATE('2024-12-05', 'YYYY-MM-DD'));
    sp_insert_tb_dispositivo(16, 6, 'Carregador Solar', 6, 1, TO_DATE('2024-12-06', 'YYYY-MM-DD'));
    sp_insert_tb_dispositivo(17, 1, 'Câmera de Segurança', 1, 1, TO_DATE('2024-12-07', 'YYYY-MM-DD'));
    sp_insert_tb_dispositivo(18, 2, 'Smart Plug', 2, 1, TO_DATE('2024-12-08', 'YYYY-MM-DD'));
    sp_insert_tb_dispositivo(19, 3, 'Geladeira Inteligente', 3, 1, TO_DATE('2024-12-09', 'YYYY-MM-DD'));
    sp_insert_tb_dispositivo(20, 4, 'Purificador de Ar', 4, 1, TO_DATE('2024-12-10', 'YYYY-MM-DD'));
END;
/

--Inserir Registros na tabela tb_sugestao

BEGIN
    sp_insert_tb_sugestao(11, 'Reduzir uso de eletrodomésticos em horário de pico', 20, 'Evitar sobrecarga durante horários de maior consumo');
    sp_insert_tb_sugestao(12, 'Usar modo econômico em dispositivos', 15, 'Economia imediata ao usar modos de baixo consumo');
    sp_insert_tb_sugestao(13, 'Trocar lâmpadas incandescentes por LED', 30, 'Eficiência energética e redução de custos');
    sp_insert_tb_sugestao(14, 'Instalar sensores de movimento em ambientes', 10, 'Evitar desperdício em áreas pouco utilizadas');
    sp_insert_tb_sugestao(15, 'Isolar termicamente o ambiente', 25, 'Reduzir a necessidade de aquecimento ou resfriamento');
    sp_insert_tb_sugestao(16, 'Desligar dispositivos em standby', 5, 'Economizar ao evitar consumo fantasma');
    sp_insert_tb_sugestao(17, 'Programar horários de uso de ar-condicionado', 18, 'Evitar uso desnecessário em horários não ocupados');
    sp_insert_tb_sugestao(18, 'Manutenção regular em equipamentos', 12, 'Evitar consumo excessivo por desgaste ou falhas');
    sp_insert_tb_sugestao(19, 'Usar energia solar para aquecimento de água', 35, 'Aproveitar recursos naturais e reduzir custos');
    sp_insert_tb_sugestao(20, 'Configurar timers em aparelhos eletrônicos', 8, 'Evitar que dispositivos fiquem ligados por longos períodos');
END;
/

--Inserir Registros na tabela tb_usuario

BEGIN
    sp_insert_tb_usuario(11, 'João Silva', 'joao@email.com', 'senha123', 'Rua A, 123', 3000, 'Residencial');
    sp_insert_tb_usuario(12, 'Maria Souza', 'maria@email.com', 'senha456', 'Rua B, 456', 4000, 'Comercial');
    sp_insert_tb_usuario(13, 'Carlos Pereira', 'carlos@email.com', 'senha789', 'Rua C, 789', 2500, 'Residencial');
    sp_insert_tb_usuario(14, 'Ana Paula', 'ana.paula@email.com', 'senha321', 'Rua D, 321', 5000, 'Industrial');
    sp_insert_tb_usuario(15, 'Luciana Costa', 'luciana@email.com', 'senha654', 'Rua E, 654', 3500, 'Residencial');
    sp_insert_tb_usuario(16, 'Roberto Lima', 'roberto@email.com', 'senha987', 'Rua F, 987', 4500, 'Comercial');
    sp_insert_tb_usuario(17, 'Mariana Braga', 'mariana@email.com', 'senha135', 'Rua G, 135', 2000, 'Residencial');
    sp_insert_tb_usuario(18, 'Gustavo Silva', 'gustavo@email.com', 'senha246', 'Rua H, 246', 5500, 'Industrial');
    sp_insert_tb_usuario(19, 'Fernanda Almeida', 'fernanda@email.com', 'senha369', 'Rua I, 369', 3200, 'Residencial');
    sp_insert_tb_usuario(20, 'Paulo Ribeiro', 'paulo@email.com', 'senha147', 'Rua J, 147', 3800, 'Comercial');
END;
/

--Criar uma procedure para exportar o JSON

CREATE OR REPLACE PROCEDURE sp_exportar_json_mongodb(
    p_tabela     IN VARCHAR2,  -- Nome da tabela
    p_resultado  OUT CLOB      -- Resultado JSON no formato MongoDB
)
AS
    v_cursor     SYS_REFCURSOR;  -- Cursor para a tabela
    v_query      CLOB;           -- Consulta dinâmica para gerar o JSON
BEGIN
    -- Construir a consulta dinâmica para gerar o JSON
    v_query := 'SELECT JSON_ARRAYAGG(
                    JSON_OBJECT(
                        ''_id'' VALUE id_usuario,
                        ''nome'' VALUE nome_usuario,
                        ''email'' VALUE email_usuario,
                        ''endereco'' VALUE endereco_usuario,
                        ''renda'' VALUE renda_usuario,
                        ''perfil'' VALUE perfil_consumo_usuario
                    )
                )
                FROM ' || p_tabela;

    -- Abrir o cursor para a consulta
    OPEN v_cursor FOR v_query;

    -- Buscar o resultado JSON
    FETCH v_cursor INTO p_resultado;
    CLOSE v_cursor;

    -- Mensagem de sucesso
    DBMS_OUTPUT.PUT_LINE('Dataset exportado com sucesso no formato MongoDB.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Erro ao exportar JSON: ' || SQLERRM);
        RAISE;
END sp_exportar_json_mongodb;
/



--Exemplo de uso

DECLARE
    v_json CLOB; -- Variável para armazenar o JSON retornado
BEGIN
    sp_exportar_json_mongodb('tb_usuario', v_json);
    DBMS_OUTPUT.PUT_LINE(v_json);
END;
/


